// This code was generated by: 
// https://github.com/recolude/swagger-unity-codegen
// Issues and PRs welcome :)

using UnityEngine;
using UnityEngine.Networking;
using System.Collections;

namespace Recolude
{

    public class RecordingService
    {

        public Config Config { get; }

        public RecordingService(Config Config)
        {
            this.Config = Config;
        }

        public class DeleteRecordingUnityWebRequest
        {

            public RuntimeError fallbackResponse;

            public UnityWebRequest UnderlyingRequest { get; }

            public DeleteRecordingUnityWebRequest(UnityWebRequest req)
            {
                this.UnderlyingRequest = req;
            }

            public IEnumerator Run()
            {
                yield return this.UnderlyingRequest.SendWebRequest();
                Interpret(this.UnderlyingRequest);
            }

            public void Interpret(UnityWebRequest req)
            {
                fallbackResponse = JsonUtility.FromJson<RuntimeError>(req.downloadHandler.text);
            }

        }
        public class DeleteRecordingRequestParams
        {
            private bool projectIdSet = false;
            private string projectId;
            public string ProjectId { get { return projectId; } set { projectIdSet = true; projectId = value; } }
            public void UnsetProjectId() { projectId = null; projectIdSet = false; }

            private bool recordingIdSet = false;
            private string recordingId;
            public string RecordingId { get { return recordingId; } set { recordingIdSet = true; recordingId = value; } }
            public void UnsetRecordingId() { recordingId = null; recordingIdSet = false; }

            public UnityWebRequest BuildUnityWebRequest(string baseURL)
            {
                var finalPath = baseURL + "/api/v1/projects/{projectId}/recordings/{recordingId}";
                finalPath = finalPath.Replace("{projectId}", projectIdSet ? UnityWebRequest.EscapeURL(projectId.ToString()) : "");
                finalPath = finalPath.Replace("{recordingId}", recordingIdSet ? UnityWebRequest.EscapeURL(recordingId.ToString()) : "");
                return new UnityWebRequest(finalPath, UnityWebRequest.kHttpVerbDELETE);
            }
        }
        public DeleteRecordingUnityWebRequest DeleteRecording(DeleteRecordingRequestParams requestParams)
        {
            var unityNetworkReq = requestParams.BuildUnityWebRequest(this.Config.BasePath);
            unityNetworkReq.downloadHandler = new DownloadHandlerBuffer();
            if (string.IsNullOrEmpty(this.Config.ApiKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-API-KEY", this.Config.ApiKeyAuth);
            }
            if (string.IsNullOrEmpty(this.Config.CognitoAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("Authorization", this.Config.CognitoAuth);
            }
            if (string.IsNullOrEmpty(this.Config.DevKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-DEV-KEY", this.Config.DevKeyAuth);
            }
            return new DeleteRecordingUnityWebRequest(unityNetworkReq);
        }

        public DeleteRecordingUnityWebRequest DeleteRecording(string projectId, string recordingId)
        {
            return DeleteRecording(new DeleteRecordingRequestParams()
            {
                ProjectId = projectId,
                RecordingId = recordingId,
            });
        }
        public class GetRecordingUnityWebRequest
        {

            public V1RecordingResponse success;

            public RuntimeError fallbackResponse;

            public UnityWebRequest UnderlyingRequest { get; }

            public GetRecordingUnityWebRequest(UnityWebRequest req)
            {
                this.UnderlyingRequest = req;
            }

            public IEnumerator Run()
            {
                yield return this.UnderlyingRequest.SendWebRequest();
                Interpret(this.UnderlyingRequest);
            }

            public void Interpret(UnityWebRequest req)
            {
                if (req.responseCode == 200)
                {
                    success = JsonUtility.FromJson<V1RecordingResponse>(req.downloadHandler.text);
                }
                else
                {
                    fallbackResponse = JsonUtility.FromJson<RuntimeError>(req.downloadHandler.text);
                }
            }

        }
        public class GetRecordingRequestParams
        {
            private bool projectIdSet = false;
            private string projectId;
            public string ProjectId { get { return projectId; } set { projectIdSet = true; projectId = value; } }
            public void UnsetProjectId() { projectId = null; projectIdSet = false; }

            private bool recordingIdSet = false;
            private string recordingId;
            public string RecordingId { get { return recordingId; } set { recordingIdSet = true; recordingId = value; } }
            public void UnsetRecordingId() { recordingId = null; recordingIdSet = false; }

            public UnityWebRequest BuildUnityWebRequest(string baseURL)
            {
                var finalPath = baseURL + "/api/v1/projects/{projectId}/recordings/{recordingId}";
                finalPath = finalPath.Replace("{projectId}", projectIdSet ? UnityWebRequest.EscapeURL(projectId.ToString()) : "");
                finalPath = finalPath.Replace("{recordingId}", recordingIdSet ? UnityWebRequest.EscapeURL(recordingId.ToString()) : "");
                return new UnityWebRequest(finalPath, UnityWebRequest.kHttpVerbGET);
            }
        }
        public GetRecordingUnityWebRequest GetRecording(GetRecordingRequestParams requestParams)
        {
            var unityNetworkReq = requestParams.BuildUnityWebRequest(this.Config.BasePath);
            unityNetworkReq.downloadHandler = new DownloadHandlerBuffer();
            if (string.IsNullOrEmpty(this.Config.ApiKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-API-KEY", this.Config.ApiKeyAuth);
            }
            if (string.IsNullOrEmpty(this.Config.CognitoAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("Authorization", this.Config.CognitoAuth);
            }
            if (string.IsNullOrEmpty(this.Config.DevKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-DEV-KEY", this.Config.DevKeyAuth);
            }
            return new GetRecordingUnityWebRequest(unityNetworkReq);
        }

        public GetRecordingUnityWebRequest GetRecording(string projectId, string recordingId)
        {
            return GetRecording(new GetRecordingRequestParams()
            {
                ProjectId = projectId,
                RecordingId = recordingId,
            });
        }
        public class ListRecordingsUnityWebRequest
        {

            public V1RecordingsResponse success;

            public RuntimeError fallbackResponse;

            public UnityWebRequest UnderlyingRequest { get; }

            public ListRecordingsUnityWebRequest(UnityWebRequest req)
            {
                this.UnderlyingRequest = req;
            }

            public IEnumerator Run()
            {
                yield return this.UnderlyingRequest.SendWebRequest();
                Interpret(this.UnderlyingRequest);
            }

            public void Interpret(UnityWebRequest req)
            {
                if (req.responseCode == 200)
                {
                    success = JsonUtility.FromJson<V1RecordingsResponse>(req.downloadHandler.text);
                }
                else
                {
                    fallbackResponse = JsonUtility.FromJson<RuntimeError>(req.downloadHandler.text);
                }
            }

        }
        public class ListRecordingsRequestParams
        {
            private bool offsetSet = false;
            private int offset;
            public int Offset { get { return offset; } set { offsetSet = true; offset = value; } }
            public void UnsetOffset() { offset = 0; offsetSet = false; }

            private bool limitSet = false;
            private int limit;
            public int Limit { get { return limit; } set { limitSet = true; limit = value; } }
            public void UnsetLimit() { limit = 0; limitSet = false; }

            private bool minDurationSet = false;
            private float minDuration;
            public float MinDuration { get { return minDuration; } set { minDurationSet = true; minDuration = value; } }
            public void UnsetMinDuration() { minDuration = 0f; minDurationSet = false; }

            private bool maxDurationSet = false;
            private float maxDuration;
            public float MaxDuration { get { return maxDuration; } set { maxDurationSet = true; maxDuration = value; } }
            public void UnsetMaxDuration() { maxDuration = 0f; maxDurationSet = false; }

            private bool nameSet = false;
            private string name;
            public string Name { get { return name; } set { nameSet = true; name = value; } }
            public void UnsetName() { name = null; nameSet = false; }

            private bool minDateSet = false;
            private int minDate;
            public int MinDate { get { return minDate; } set { minDateSet = true; minDate = value; } }
            public void UnsetMinDate() { minDate = 0; minDateSet = false; }

            private bool maxDateSet = false;
            private int maxDate;
            public int MaxDate { get { return maxDate; } set { maxDateSet = true; maxDate = value; } }
            public void UnsetMaxDate() { maxDate = 0; maxDateSet = false; }

            private bool minSubjectsSet = false;
            private int minSubjects;
            public int MinSubjects { get { return minSubjects; } set { minSubjectsSet = true; minSubjects = value; } }
            public void UnsetMinSubjects() { minSubjects = 0; minSubjectsSet = false; }

            private bool maxSubjectsSet = false;
            private int maxSubjects;
            public int MaxSubjects { get { return maxSubjects; } set { maxSubjectsSet = true; maxSubjects = value; } }
            public void UnsetMaxSubjects() { maxSubjects = 0; maxSubjectsSet = false; }

            private bool minEventsSet = false;
            private int minEvents;
            public int MinEvents { get { return minEvents; } set { minEventsSet = true; minEvents = value; } }
            public void UnsetMinEvents() { minEvents = 0; minEventsSet = false; }

            private bool maxEventsSet = false;
            private int maxEvents;
            public int MaxEvents { get { return maxEvents; } set { maxEventsSet = true; maxEvents = value; } }
            public void UnsetMaxEvents() { maxEvents = 0; maxEventsSet = false; }

            private bool searchStringSet = false;
            private string searchString;
            public string SearchString { get { return searchString; } set { searchStringSet = true; searchString = value; } }
            public void UnsetSearchString() { searchString = null; searchStringSet = false; }

            private bool order_bySet = false;
            private string order_by;
            public string Order_by { get { return order_by; } set { order_bySet = true; order_by = value; } }
            public void UnsetOrder_by() { order_by = null; order_bySet = false; }

            private bool visibilitySet = false;
            private string visibility;
            public string Visibility { get { return visibility; } set { visibilitySet = true; visibility = value; } }
            public void UnsetVisibility() { visibility = null; visibilitySet = false; }

            private bool projectIdSet = false;
            private string projectId;
            public string ProjectId { get { return projectId; } set { projectIdSet = true; projectId = value; } }
            public void UnsetProjectId() { projectId = null; projectIdSet = false; }

            private bool organizationIdSet = false;
            private string organizationId;
            public string OrganizationId { get { return organizationId; } set { organizationIdSet = true; organizationId = value; } }
            public void UnsetOrganizationId() { organizationId = null; organizationIdSet = false; }

            private bool projectIdsSet = false;
            private string[] projectIds;
            public string[] ProjectIds { get { return projectIds; } set { projectIdsSet = true; projectIds = value; } }
            public void UnsetProjectIds() { projectIds = null; projectIdsSet = false; }

            private bool organizationIdsSet = false;
            private string[] organizationIds;
            public string[] OrganizationIds { get { return organizationIds; } set { organizationIdsSet = true; organizationIds = value; } }
            public void UnsetOrganizationIds() { organizationIds = null; organizationIdsSet = false; }

            public UnityWebRequest BuildUnityWebRequest(string baseURL)
            {
                var finalPath = baseURL + "/api/v1/recordings";
                var queryAdded = false;

                if (offsetSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "offset=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(offset.ToString());
                }

                if (limitSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "limit=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(limit.ToString());
                }

                if (minDurationSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minDuration=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minDuration.ToString());
                }

                if (maxDurationSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxDuration=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxDuration.ToString());
                }

                if (nameSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "name=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(name.ToString());
                }

                if (minDateSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minDate=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minDate.ToString());
                }

                if (maxDateSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxDate=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxDate.ToString());
                }

                if (minSubjectsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minSubjects=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minSubjects.ToString());
                }

                if (maxSubjectsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxSubjects=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxSubjects.ToString());
                }

                if (minEventsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minEvents=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minEvents.ToString());
                }

                if (maxEventsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxEvents=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxEvents.ToString());
                }

                if (searchStringSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "searchString=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(searchString.ToString());
                }

                if (order_bySet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "order_by=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(order_by.ToString());
                }

                if (visibilitySet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "visibility=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(visibility.ToString());
                }

                if (projectIdSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "projectId=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(projectId.ToString());
                }

                if (organizationIdSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "organizationId=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(organizationId.ToString());
                }

                if (projectIdsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "projectIds=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(projectIds.ToString());
                }

                if (organizationIdsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "organizationIds=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(organizationIds.ToString());
                }

                return new UnityWebRequest(finalPath, UnityWebRequest.kHttpVerbGET);
            }
        }
        public ListRecordingsUnityWebRequest ListRecordings(ListRecordingsRequestParams requestParams)
        {
            var unityNetworkReq = requestParams.BuildUnityWebRequest(this.Config.BasePath);
            unityNetworkReq.downloadHandler = new DownloadHandlerBuffer();
            if (string.IsNullOrEmpty(this.Config.ApiKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-API-KEY", this.Config.ApiKeyAuth);
            }
            if (string.IsNullOrEmpty(this.Config.CognitoAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("Authorization", this.Config.CognitoAuth);
            }
            if (string.IsNullOrEmpty(this.Config.DevKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-DEV-KEY", this.Config.DevKeyAuth);
            }
            return new ListRecordingsUnityWebRequest(unityNetworkReq);
        }

        public ListRecordingsUnityWebRequest ListRecordings(int offset, int limit, float minDuration, float maxDuration, string name, int minDate, int maxDate, int minSubjects, int maxSubjects, int minEvents, int maxEvents, string searchString, string order_by, string visibility, string projectId, string organizationId, string[] projectIds, string[] organizationIds)
        {
            return ListRecordings(new ListRecordingsRequestParams()
            {
                Offset = offset,
                Limit = limit,
                MinDuration = minDuration,
                MaxDuration = maxDuration,
                Name = name,
                MinDate = minDate,
                MaxDate = maxDate,
                MinSubjects = minSubjects,
                MaxSubjects = maxSubjects,
                MinEvents = minEvents,
                MaxEvents = maxEvents,
                SearchString = searchString,
                Order_by = order_by,
                Visibility = visibility,
                ProjectId = projectId,
                OrganizationId = organizationId,
                ProjectIds = projectIds,
                OrganizationIds = organizationIds,
            });
        }
        public class ListRecordings3UnityWebRequest
        {

            public V1RecordingsResponse success;

            public RuntimeError fallbackResponse;

            public UnityWebRequest UnderlyingRequest { get; }

            public ListRecordings3UnityWebRequest(UnityWebRequest req)
            {
                this.UnderlyingRequest = req;
            }

            public IEnumerator Run()
            {
                yield return this.UnderlyingRequest.SendWebRequest();
                Interpret(this.UnderlyingRequest);
            }

            public void Interpret(UnityWebRequest req)
            {
                if (req.responseCode == 200)
                {
                    success = JsonUtility.FromJson<V1RecordingsResponse>(req.downloadHandler.text);
                }
                else
                {
                    fallbackResponse = JsonUtility.FromJson<RuntimeError>(req.downloadHandler.text);
                }
            }

        }
        public class ListRecordings3RequestParams
        {
            private bool organizationIdSet = false;
            private string organizationId;
            public string OrganizationId { get { return organizationId; } set { organizationIdSet = true; organizationId = value; } }
            public void UnsetOrganizationId() { organizationId = null; organizationIdSet = false; }

            private bool offsetSet = false;
            private int offset;
            public int Offset { get { return offset; } set { offsetSet = true; offset = value; } }
            public void UnsetOffset() { offset = 0; offsetSet = false; }

            private bool limitSet = false;
            private int limit;
            public int Limit { get { return limit; } set { limitSet = true; limit = value; } }
            public void UnsetLimit() { limit = 0; limitSet = false; }

            private bool minDurationSet = false;
            private float minDuration;
            public float MinDuration { get { return minDuration; } set { minDurationSet = true; minDuration = value; } }
            public void UnsetMinDuration() { minDuration = 0f; minDurationSet = false; }

            private bool maxDurationSet = false;
            private float maxDuration;
            public float MaxDuration { get { return maxDuration; } set { maxDurationSet = true; maxDuration = value; } }
            public void UnsetMaxDuration() { maxDuration = 0f; maxDurationSet = false; }

            private bool nameSet = false;
            private string name;
            public string Name { get { return name; } set { nameSet = true; name = value; } }
            public void UnsetName() { name = null; nameSet = false; }

            private bool minDateSet = false;
            private int minDate;
            public int MinDate { get { return minDate; } set { minDateSet = true; minDate = value; } }
            public void UnsetMinDate() { minDate = 0; minDateSet = false; }

            private bool maxDateSet = false;
            private int maxDate;
            public int MaxDate { get { return maxDate; } set { maxDateSet = true; maxDate = value; } }
            public void UnsetMaxDate() { maxDate = 0; maxDateSet = false; }

            private bool minSubjectsSet = false;
            private int minSubjects;
            public int MinSubjects { get { return minSubjects; } set { minSubjectsSet = true; minSubjects = value; } }
            public void UnsetMinSubjects() { minSubjects = 0; minSubjectsSet = false; }

            private bool maxSubjectsSet = false;
            private int maxSubjects;
            public int MaxSubjects { get { return maxSubjects; } set { maxSubjectsSet = true; maxSubjects = value; } }
            public void UnsetMaxSubjects() { maxSubjects = 0; maxSubjectsSet = false; }

            private bool minEventsSet = false;
            private int minEvents;
            public int MinEvents { get { return minEvents; } set { minEventsSet = true; minEvents = value; } }
            public void UnsetMinEvents() { minEvents = 0; minEventsSet = false; }

            private bool maxEventsSet = false;
            private int maxEvents;
            public int MaxEvents { get { return maxEvents; } set { maxEventsSet = true; maxEvents = value; } }
            public void UnsetMaxEvents() { maxEvents = 0; maxEventsSet = false; }

            private bool searchStringSet = false;
            private string searchString;
            public string SearchString { get { return searchString; } set { searchStringSet = true; searchString = value; } }
            public void UnsetSearchString() { searchString = null; searchStringSet = false; }

            private bool order_bySet = false;
            private string order_by;
            public string Order_by { get { return order_by; } set { order_bySet = true; order_by = value; } }
            public void UnsetOrder_by() { order_by = null; order_bySet = false; }

            private bool visibilitySet = false;
            private string visibility;
            public string Visibility { get { return visibility; } set { visibilitySet = true; visibility = value; } }
            public void UnsetVisibility() { visibility = null; visibilitySet = false; }

            private bool projectIdSet = false;
            private string projectId;
            public string ProjectId { get { return projectId; } set { projectIdSet = true; projectId = value; } }
            public void UnsetProjectId() { projectId = null; projectIdSet = false; }

            private bool projectIdsSet = false;
            private string[] projectIds;
            public string[] ProjectIds { get { return projectIds; } set { projectIdsSet = true; projectIds = value; } }
            public void UnsetProjectIds() { projectIds = null; projectIdsSet = false; }

            private bool organizationIdsSet = false;
            private string[] organizationIds;
            public string[] OrganizationIds { get { return organizationIds; } set { organizationIdsSet = true; organizationIds = value; } }
            public void UnsetOrganizationIds() { organizationIds = null; organizationIdsSet = false; }

            public UnityWebRequest BuildUnityWebRequest(string baseURL)
            {
                var finalPath = baseURL + "/api/v1/organizations/{organizationId}/recordings";
                finalPath = finalPath.Replace("{organizationId}", organizationIdSet ? UnityWebRequest.EscapeURL(organizationId.ToString()) : "");
                var queryAdded = false;

                if (offsetSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "offset=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(offset.ToString());
                }

                if (limitSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "limit=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(limit.ToString());
                }

                if (minDurationSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minDuration=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minDuration.ToString());
                }

                if (maxDurationSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxDuration=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxDuration.ToString());
                }

                if (nameSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "name=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(name.ToString());
                }

                if (minDateSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minDate=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minDate.ToString());
                }

                if (maxDateSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxDate=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxDate.ToString());
                }

                if (minSubjectsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minSubjects=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minSubjects.ToString());
                }

                if (maxSubjectsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxSubjects=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxSubjects.ToString());
                }

                if (minEventsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minEvents=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minEvents.ToString());
                }

                if (maxEventsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxEvents=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxEvents.ToString());
                }

                if (searchStringSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "searchString=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(searchString.ToString());
                }

                if (order_bySet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "order_by=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(order_by.ToString());
                }

                if (visibilitySet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "visibility=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(visibility.ToString());
                }

                if (projectIdSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "projectId=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(projectId.ToString());
                }

                if (projectIdsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "projectIds=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(projectIds.ToString());
                }

                if (organizationIdsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "organizationIds=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(organizationIds.ToString());
                }

                return new UnityWebRequest(finalPath, UnityWebRequest.kHttpVerbGET);
            }
        }
        public ListRecordings3UnityWebRequest ListRecordings3(ListRecordings3RequestParams requestParams)
        {
            var unityNetworkReq = requestParams.BuildUnityWebRequest(this.Config.BasePath);
            unityNetworkReq.downloadHandler = new DownloadHandlerBuffer();
            if (string.IsNullOrEmpty(this.Config.ApiKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-API-KEY", this.Config.ApiKeyAuth);
            }
            if (string.IsNullOrEmpty(this.Config.CognitoAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("Authorization", this.Config.CognitoAuth);
            }
            if (string.IsNullOrEmpty(this.Config.DevKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-DEV-KEY", this.Config.DevKeyAuth);
            }
            return new ListRecordings3UnityWebRequest(unityNetworkReq);
        }

        public ListRecordings3UnityWebRequest ListRecordings3(string organizationId, int offset, int limit, float minDuration, float maxDuration, string name, int minDate, int maxDate, int minSubjects, int maxSubjects, int minEvents, int maxEvents, string searchString, string order_by, string visibility, string projectId, string[] projectIds, string[] organizationIds)
        {
            return ListRecordings3(new ListRecordings3RequestParams()
            {
                OrganizationId = organizationId,
                Offset = offset,
                Limit = limit,
                MinDuration = minDuration,
                MaxDuration = maxDuration,
                Name = name,
                MinDate = minDate,
                MaxDate = maxDate,
                MinSubjects = minSubjects,
                MaxSubjects = maxSubjects,
                MinEvents = minEvents,
                MaxEvents = maxEvents,
                SearchString = searchString,
                Order_by = order_by,
                Visibility = visibility,
                ProjectId = projectId,
                ProjectIds = projectIds,
                OrganizationIds = organizationIds,
            });
        }
        public class ListRecordings2UnityWebRequest
        {

            public V1RecordingsResponse success;

            public RuntimeError fallbackResponse;

            public UnityWebRequest UnderlyingRequest { get; }

            public ListRecordings2UnityWebRequest(UnityWebRequest req)
            {
                this.UnderlyingRequest = req;
            }

            public IEnumerator Run()
            {
                yield return this.UnderlyingRequest.SendWebRequest();
                Interpret(this.UnderlyingRequest);
            }

            public void Interpret(UnityWebRequest req)
            {
                if (req.responseCode == 200)
                {
                    success = JsonUtility.FromJson<V1RecordingsResponse>(req.downloadHandler.text);
                }
                else
                {
                    fallbackResponse = JsonUtility.FromJson<RuntimeError>(req.downloadHandler.text);
                }
            }

        }
        public class ListRecordings2RequestParams
        {
            private bool projectIdSet = false;
            private string projectId;
            public string ProjectId { get { return projectId; } set { projectIdSet = true; projectId = value; } }
            public void UnsetProjectId() { projectId = null; projectIdSet = false; }

            private bool offsetSet = false;
            private int offset;
            public int Offset { get { return offset; } set { offsetSet = true; offset = value; } }
            public void UnsetOffset() { offset = 0; offsetSet = false; }

            private bool limitSet = false;
            private int limit;
            public int Limit { get { return limit; } set { limitSet = true; limit = value; } }
            public void UnsetLimit() { limit = 0; limitSet = false; }

            private bool minDurationSet = false;
            private float minDuration;
            public float MinDuration { get { return minDuration; } set { minDurationSet = true; minDuration = value; } }
            public void UnsetMinDuration() { minDuration = 0f; minDurationSet = false; }

            private bool maxDurationSet = false;
            private float maxDuration;
            public float MaxDuration { get { return maxDuration; } set { maxDurationSet = true; maxDuration = value; } }
            public void UnsetMaxDuration() { maxDuration = 0f; maxDurationSet = false; }

            private bool nameSet = false;
            private string name;
            public string Name { get { return name; } set { nameSet = true; name = value; } }
            public void UnsetName() { name = null; nameSet = false; }

            private bool minDateSet = false;
            private int minDate;
            public int MinDate { get { return minDate; } set { minDateSet = true; minDate = value; } }
            public void UnsetMinDate() { minDate = 0; minDateSet = false; }

            private bool maxDateSet = false;
            private int maxDate;
            public int MaxDate { get { return maxDate; } set { maxDateSet = true; maxDate = value; } }
            public void UnsetMaxDate() { maxDate = 0; maxDateSet = false; }

            private bool minSubjectsSet = false;
            private int minSubjects;
            public int MinSubjects { get { return minSubjects; } set { minSubjectsSet = true; minSubjects = value; } }
            public void UnsetMinSubjects() { minSubjects = 0; minSubjectsSet = false; }

            private bool maxSubjectsSet = false;
            private int maxSubjects;
            public int MaxSubjects { get { return maxSubjects; } set { maxSubjectsSet = true; maxSubjects = value; } }
            public void UnsetMaxSubjects() { maxSubjects = 0; maxSubjectsSet = false; }

            private bool minEventsSet = false;
            private int minEvents;
            public int MinEvents { get { return minEvents; } set { minEventsSet = true; minEvents = value; } }
            public void UnsetMinEvents() { minEvents = 0; minEventsSet = false; }

            private bool maxEventsSet = false;
            private int maxEvents;
            public int MaxEvents { get { return maxEvents; } set { maxEventsSet = true; maxEvents = value; } }
            public void UnsetMaxEvents() { maxEvents = 0; maxEventsSet = false; }

            private bool searchStringSet = false;
            private string searchString;
            public string SearchString { get { return searchString; } set { searchStringSet = true; searchString = value; } }
            public void UnsetSearchString() { searchString = null; searchStringSet = false; }

            private bool order_bySet = false;
            private string order_by;
            public string Order_by { get { return order_by; } set { order_bySet = true; order_by = value; } }
            public void UnsetOrder_by() { order_by = null; order_bySet = false; }

            private bool visibilitySet = false;
            private string visibility;
            public string Visibility { get { return visibility; } set { visibilitySet = true; visibility = value; } }
            public void UnsetVisibility() { visibility = null; visibilitySet = false; }

            private bool organizationIdSet = false;
            private string organizationId;
            public string OrganizationId { get { return organizationId; } set { organizationIdSet = true; organizationId = value; } }
            public void UnsetOrganizationId() { organizationId = null; organizationIdSet = false; }

            private bool projectIdsSet = false;
            private string[] projectIds;
            public string[] ProjectIds { get { return projectIds; } set { projectIdsSet = true; projectIds = value; } }
            public void UnsetProjectIds() { projectIds = null; projectIdsSet = false; }

            private bool organizationIdsSet = false;
            private string[] organizationIds;
            public string[] OrganizationIds { get { return organizationIds; } set { organizationIdsSet = true; organizationIds = value; } }
            public void UnsetOrganizationIds() { organizationIds = null; organizationIdsSet = false; }

            public UnityWebRequest BuildUnityWebRequest(string baseURL)
            {
                var finalPath = baseURL + "/api/v1/projects/{projectId}/recordings";
                finalPath = finalPath.Replace("{projectId}", projectIdSet ? UnityWebRequest.EscapeURL(projectId.ToString()) : "");
                var queryAdded = false;

                if (offsetSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "offset=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(offset.ToString());
                }

                if (limitSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "limit=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(limit.ToString());
                }

                if (minDurationSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minDuration=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minDuration.ToString());
                }

                if (maxDurationSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxDuration=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxDuration.ToString());
                }

                if (nameSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "name=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(name.ToString());
                }

                if (minDateSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minDate=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minDate.ToString());
                }

                if (maxDateSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxDate=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxDate.ToString());
                }

                if (minSubjectsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minSubjects=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minSubjects.ToString());
                }

                if (maxSubjectsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxSubjects=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxSubjects.ToString());
                }

                if (minEventsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "minEvents=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(minEvents.ToString());
                }

                if (maxEventsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "maxEvents=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(maxEvents.ToString());
                }

                if (searchStringSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "searchString=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(searchString.ToString());
                }

                if (order_bySet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "order_by=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(order_by.ToString());
                }

                if (visibilitySet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "visibility=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(visibility.ToString());
                }

                if (organizationIdSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "organizationId=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(organizationId.ToString());
                }

                if (projectIdsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "projectIds=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(projectIds.ToString());
                }

                if (organizationIdsSet)
                {
                    finalPath += (queryAdded ? "&" : "?") + "organizationIds=";
                    queryAdded = true;
                    finalPath += UnityWebRequest.EscapeURL(organizationIds.ToString());
                }

                return new UnityWebRequest(finalPath, UnityWebRequest.kHttpVerbGET);
            }
        }
        public ListRecordings2UnityWebRequest ListRecordings2(ListRecordings2RequestParams requestParams)
        {
            var unityNetworkReq = requestParams.BuildUnityWebRequest(this.Config.BasePath);
            unityNetworkReq.downloadHandler = new DownloadHandlerBuffer();
            if (string.IsNullOrEmpty(this.Config.ApiKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-API-KEY", this.Config.ApiKeyAuth);
            }
            if (string.IsNullOrEmpty(this.Config.CognitoAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("Authorization", this.Config.CognitoAuth);
            }
            if (string.IsNullOrEmpty(this.Config.DevKeyAuth) == false)
            {
                unityNetworkReq.SetRequestHeader("X-DEV-KEY", this.Config.DevKeyAuth);
            }
            return new ListRecordings2UnityWebRequest(unityNetworkReq);
        }

        public ListRecordings2UnityWebRequest ListRecordings2(string projectId, int offset, int limit, float minDuration, float maxDuration, string name, int minDate, int maxDate, int minSubjects, int maxSubjects, int minEvents, int maxEvents, string searchString, string order_by, string visibility, string organizationId, string[] projectIds, string[] organizationIds)
        {
            return ListRecordings2(new ListRecordings2RequestParams()
            {
                ProjectId = projectId,
                Offset = offset,
                Limit = limit,
                MinDuration = minDuration,
                MaxDuration = maxDuration,
                Name = name,
                MinDate = minDate,
                MaxDate = maxDate,
                MinSubjects = minSubjects,
                MaxSubjects = maxSubjects,
                MinEvents = minEvents,
                MaxEvents = maxEvents,
                SearchString = searchString,
                Order_by = order_by,
                Visibility = visibility,
                OrganizationId = organizationId,
                ProjectIds = projectIds,
                OrganizationIds = organizationIds,
            });
        }
    }

}